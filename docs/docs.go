// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Nikolai Kaliga",
            "email": "nick.kaliga@ya.ru"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/client": {
            "put": {
                "description": "Create new client entity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Create a new client",
                "operationId": "createClient",
                "parameters": [
                    {
                        "description": "Client object to create",
                        "name": "client",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Client"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Client created successfully"
                    },
                    "400": {
                        "description": "Bad request, invalid JSON data"
                    },
                    "500": {
                        "description": "Internal server error, failed to create a client"
                    }
                }
            },
            "delete": {
                "description": "Delete client from db.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Delete existing client",
                "operationId": "deleteClient",
                "parameters": [
                    {
                        "description": "Client object to delete",
                        "name": "client",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Client"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Client deleted successfully"
                    },
                    "400": {
                        "description": "Bad request, invalid JSON data"
                    },
                    "500": {
                        "description": "Internal server error, failed to delete client"
                    }
                }
            },
            "patch": {
                "description": "Update client in db.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "clients"
                ],
                "summary": "Update existing client",
                "operationId": "updateClient",
                "parameters": [
                    {
                        "description": "Client object to update",
                        "name": "client",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Client"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Client updated successfully"
                    },
                    "400": {
                        "description": "Bad request, invalid JSON data"
                    },
                    "500": {
                        "description": "Internal server error, failed to update client"
                    }
                }
            }
        },
        "/mailing": {
            "put": {
                "description": "Create a new mailing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mailings"
                ],
                "summary": "Create a mailing",
                "operationId": "createMailing",
                "parameters": [
                    {
                        "description": "Mailing object to create",
                        "name": "mailing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Mailing"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Mailing created successfully"
                    },
                    "400": {
                        "description": "Bad request, invalid JSON data"
                    },
                    "500": {
                        "description": "Internal server error, failed to create mailing"
                    }
                }
            },
            "post": {
                "description": "Get Messages by existing mailing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mailings"
                ],
                "summary": "Post with Mailing",
                "operationId": "getMessagesByMailing",
                "parameters": [
                    {
                        "description": "Mailing object to select Messages by mailing's filters",
                        "name": "mailing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Mailing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages catched successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid JSON data",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error, failed to catch messages",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete mailing from db.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mailings"
                ],
                "summary": "Delete existing mailing",
                "operationId": "deleteMailing",
                "parameters": [
                    {
                        "description": "Mailing object to delete",
                        "name": "mailing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Mailing"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Mailing deleted successfully"
                    },
                    "400": {
                        "description": "Bad request, invalid JSON data"
                    },
                    "500": {
                        "description": "Internal server error, failed to delete mailing"
                    }
                }
            },
            "patch": {
                "description": "Update mailing in db.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mailings"
                ],
                "summary": "Update existing mailing",
                "operationId": "updateMailing",
                "parameters": [
                    {
                        "description": "Mailing object to update",
                        "name": "mailing",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Mailing"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Mailing updated successfully"
                    },
                    "400": {
                        "description": "Bad request, invalid JSON data"
                    },
                    "500": {
                        "description": "Internal server error, failed to update mailing"
                    }
                }
            }
        },
        "/mailing/stats": {
            "get": {
                "description": "Get MailingStats about all Mailings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mailings"
                ],
                "summary": "Get MailingStats",
                "operationId": "getStats",
                "responses": {
                    "200": {
                        "description": "MailingStats received",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.MailingStats"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error, failed to receive stats",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Client": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "mobile_operator_code": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "integer"
                },
                "tag": {
                    "type": "string"
                },
                "time_zone": {
                    "type": "integer"
                }
            }
        },
        "entity.Mailing": {
            "type": "object",
            "properties": {
                "datetime_end": {
                    "type": "string"
                },
                "datetime_start": {
                    "type": "string"
                },
                "filter_choice": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "interval_end": {
                    "type": "string"
                },
                "interval_start": {
                    "type": "string"
                },
                "message_text": {
                    "type": "string"
                },
                "mobile_operator_code": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "entity.MailingStats": {
            "type": "object",
            "properties": {
                "datetime_end": {
                    "type": "string"
                },
                "datetime_start": {
                    "type": "string"
                },
                "failed": {
                    "description": "About Messages DeliveryStatus atribute",
                    "type": "integer"
                },
                "mailing_id": {
                    "type": "integer"
                },
                "succesed": {
                    "description": "About Messages DeliveryStatus atribute",
                    "type": "integer"
                }
            }
        },
        "entity.Message": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "integer"
                },
                "date_time_creation": {
                    "type": "string"
                },
                "delivery_status": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "mailing_id": {
                    "type": "integer"
                },
                "try": {
                    "type": "integer"
                }
            }
        },
        "v1.errorResponse": {
            "type": "object",
            "properties": {
                "error_msg": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Go Mailing Service",
	Description:      "Closed API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
