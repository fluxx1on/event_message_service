// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity(in *jlexer.Lexer, out *SendResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity(out *jwriter.Writer, in SendResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity(l, v)
}
func easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity1(in *jlexer.Lexer, out *SendRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "phone":
			out.Phone = int64(in.Int64())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity1(out *jwriter.Writer, in SendRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.Int64(int64(in.Phone))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity1(l, v)
}
func easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity2(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "date_time_creation":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateTimeCreation).UnmarshalJSON(data))
			}
		case "try":
			out.Try = int(in.Int())
		case "delivery_status":
			out.DeliveryStatus = bool(in.Bool())
		case "mailing_id":
			out.MailingID = int64(in.Int64())
		case "client_id":
			out.ClientID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity2(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"date_time_creation\":"
		out.RawString(prefix)
		out.Raw((in.DateTimeCreation).MarshalJSON())
	}
	{
		const prefix string = ",\"try\":"
		out.RawString(prefix)
		out.Int(int(in.Try))
	}
	{
		const prefix string = ",\"delivery_status\":"
		out.RawString(prefix)
		out.Bool(bool(in.DeliveryStatus))
	}
	{
		const prefix string = ",\"mailing_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.MailingID))
	}
	{
		const prefix string = ",\"client_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ClientID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity2(l, v)
}
func easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity3(in *jlexer.Lexer, out *MailingWithClients) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mailing":
			if in.IsNull() {
				in.Skip()
				out.Mailing = nil
			} else {
				if out.Mailing == nil {
					out.Mailing = new(Mailing)
				}
				(*out.Mailing).UnmarshalEasyJSON(in)
			}
		case "clients":
			if in.IsNull() {
				in.Skip()
				out.Clients = nil
			} else {
				in.Delim('[')
				if out.Clients == nil {
					if !in.IsDelim(']') {
						out.Clients = make(Clients, 0, 8)
					} else {
						out.Clients = Clients{}
					}
				} else {
					out.Clients = (out.Clients)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Client
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Client)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Clients = append(out.Clients, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "try":
			out.Try = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity3(out *jwriter.Writer, in MailingWithClients) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mailing\":"
		out.RawString(prefix[1:])
		if in.Mailing == nil {
			out.RawString("null")
		} else {
			(*in.Mailing).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"clients\":"
		out.RawString(prefix)
		if in.Clients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Clients {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"try\":"
		out.RawString(prefix)
		out.Int(int(in.Try))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailingWithClients) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailingWithClients) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailingWithClients) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailingWithClients) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity3(l, v)
}
func easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity4(in *jlexer.Lexer, out *MailingStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mailing_id":
			out.MailingID = int64(in.Int64())
		case "datetime_start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateTimeStart).UnmarshalJSON(data))
			}
		case "datetime_end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateTimeEnd).UnmarshalJSON(data))
			}
		case "succesed":
			out.Succesed = int(in.Int())
		case "failed":
			out.Failed = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity4(out *jwriter.Writer, in MailingStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mailing_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.MailingID))
	}
	{
		const prefix string = ",\"datetime_start\":"
		out.RawString(prefix)
		out.Raw((in.DateTimeStart).MarshalJSON())
	}
	{
		const prefix string = ",\"datetime_end\":"
		out.RawString(prefix)
		out.Raw((in.DateTimeEnd).MarshalJSON())
	}
	{
		const prefix string = ",\"succesed\":"
		out.RawString(prefix)
		out.Int(int(in.Succesed))
	}
	{
		const prefix string = ",\"failed\":"
		out.RawString(prefix)
		out.Int(int(in.Failed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MailingStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MailingStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MailingStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MailingStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity4(l, v)
}
func easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity5(in *jlexer.Lexer, out *Mailing) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "message_text":
			out.MessageText = string(in.String())
		case "mobile_operator_code":
			out.MobileOperator = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "filter_choice":
			out.FilterChoice = string(in.String())
		case "datetime_start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateTimeStart).UnmarshalJSON(data))
			}
		case "datetime_end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateTimeEnd).UnmarshalJSON(data))
			}
		case "interval_start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IntervalStart).UnmarshalJSON(data))
			}
		case "interval_end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IntervalEnd).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity5(out *jwriter.Writer, in Mailing) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"message_text\":"
		out.RawString(prefix)
		out.String(string(in.MessageText))
	}
	{
		const prefix string = ",\"mobile_operator_code\":"
		out.RawString(prefix)
		out.String(string(in.MobileOperator))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"filter_choice\":"
		out.RawString(prefix)
		out.String(string(in.FilterChoice))
	}
	{
		const prefix string = ",\"datetime_start\":"
		out.RawString(prefix)
		out.Raw((in.DateTimeStart).MarshalJSON())
	}
	{
		const prefix string = ",\"datetime_end\":"
		out.RawString(prefix)
		out.Raw((in.DateTimeEnd).MarshalJSON())
	}
	{
		const prefix string = ",\"interval_start\":"
		out.RawString(prefix)
		out.Raw((in.IntervalStart).MarshalJSON())
	}
	{
		const prefix string = ",\"interval_end\":"
		out.RawString(prefix)
		out.Raw((in.IntervalEnd).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mailing) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mailing) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mailing) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mailing) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity5(l, v)
}
func easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity6(in *jlexer.Lexer, out *Client) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "phone_number":
			out.PhoneNumber = int64(in.Int64())
		case "mobile_operator_code":
			out.MobileOperator = int(in.Int())
		case "tag":
			out.Tag = string(in.String())
		case "time_zone":
			out.TimeZone = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity6(out *jwriter.Writer, in Client) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"phone_number\":"
		out.RawString(prefix)
		out.Int64(int64(in.PhoneNumber))
	}
	{
		const prefix string = ",\"mobile_operator_code\":"
		out.RawString(prefix)
		out.Int(int(in.MobileOperator))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"time_zone\":"
		out.RawString(prefix)
		out.Int(int(in.TimeZone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Client) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Client) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Client) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Client) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGitlabComFluxx1onGroupEventMessageServiceInternalEntity6(l, v)
}
