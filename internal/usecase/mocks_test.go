// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "gitlab.com/fluxx1on_group/event_message_service/internal/entity"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockClient) Add(arg0 context.Context, arg1 *entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockClientMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockClient)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockClient) Delete(arg0 context.Context, arg1 *entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), arg0, arg1)
}

// Patch mocks base method.
func (m *MockClient) Patch(arg0 context.Context, arg1 *entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockClientMockRecorder) Patch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClient)(nil).Patch), arg0, arg1)
}

// MockMailing is a mock of Mailing interface.
type MockMailing struct {
	ctrl     *gomock.Controller
	recorder *MockMailingMockRecorder
}

// MockMailingMockRecorder is the mock recorder for MockMailing.
type MockMailingMockRecorder struct {
	mock *MockMailing
}

// NewMockMailing creates a new mock instance.
func NewMockMailing(ctrl *gomock.Controller) *MockMailing {
	mock := &MockMailing{ctrl: ctrl}
	mock.recorder = &MockMailingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailing) EXPECT() *MockMailingMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMailing) Add(arg0 context.Context, arg1 *entity.Mailing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMailingMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMailing)(nil).Add), arg0, arg1)
}

// Delete mocks base method.
func (m *MockMailing) Delete(arg0 context.Context, arg1 *entity.Mailing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMailingMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMailing)(nil).Delete), arg0, arg1)
}

// GetMailingStats mocks base method.
func (m *MockMailing) GetMailingStats(arg0 context.Context) ([]*entity.MailingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMailingStats", arg0)
	ret0, _ := ret[0].([]*entity.MailingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMailingStats indicates an expected call of GetMailingStats.
func (mr *MockMailingMockRecorder) GetMailingStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMailingStats", reflect.TypeOf((*MockMailing)(nil).GetMailingStats), arg0)
}

// GetMessagesByMailing mocks base method.
func (m *MockMailing) GetMessagesByMailing(arg0 context.Context, arg1 *entity.Mailing) (entity.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByMailing", arg0, arg1)
	ret0, _ := ret[0].(entity.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByMailing indicates an expected call of GetMessagesByMailing.
func (mr *MockMailingMockRecorder) GetMessagesByMailing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByMailing", reflect.TypeOf((*MockMailing)(nil).GetMessagesByMailing), arg0, arg1)
}

// Patch mocks base method.
func (m *MockMailing) Patch(arg0 context.Context, arg1 *entity.Mailing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockMailingMockRecorder) Patch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockMailing)(nil).Patch), arg0, arg1)
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// ConsumeGroup mocks base method.
func (m *MockConsumer) ConsumeGroup(arg0 context.Context, arg1 *entity.Mailing) (*entity.MailingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeGroup", arg0, arg1)
	ret0, _ := ret[0].(*entity.MailingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeGroup indicates an expected call of ConsumeGroup.
func (mr *MockConsumerMockRecorder) ConsumeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeGroup", reflect.TypeOf((*MockConsumer)(nil).ConsumeGroup), arg0, arg1)
}

// ConsumePool mocks base method.
func (m *MockConsumer) ConsumePool(arg0 context.Context, arg1 *entity.MailingWithClients) (*entity.MailingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumePool", arg0, arg1)
	ret0, _ := ret[0].(*entity.MailingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumePool indicates an expected call of ConsumePool.
func (mr *MockConsumerMockRecorder) ConsumePool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumePool", reflect.TypeOf((*MockConsumer)(nil).ConsumePool), arg0, arg1)
}

// MockClientRepo is a mock of ClientRepo interface.
type MockClientRepo struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepoMockRecorder
}

// MockClientRepoMockRecorder is the mock recorder for MockClientRepo.
type MockClientRepoMockRecorder struct {
	mock *MockClientRepo
}

// NewMockClientRepo creates a new mock instance.
func NewMockClientRepo(ctrl *gomock.Controller) *MockClientRepo {
	mock := &MockClientRepo{ctrl: ctrl}
	mock.recorder = &MockClientRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepo) EXPECT() *MockClientRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClientRepo) Create(arg0 context.Context, arg1 *entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockClientRepo) Delete(arg0 context.Context, arg1 *entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientRepo)(nil).Delete), arg0, arg1)
}

// Read mocks base method.
func (m *MockClientRepo) Read(arg0 context.Context, arg1 *entity.Client) (*entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockClientRepoMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockClientRepo)(nil).Read), arg0, arg1)
}

// ReadByFilter mocks base method.
func (m *MockClientRepo) ReadByFilter(arg0 context.Context, arg1 *entity.Mailing) (entity.Clients, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByFilter", arg0, arg1)
	ret0, _ := ret[0].(entity.Clients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByFilter indicates an expected call of ReadByFilter.
func (mr *MockClientRepoMockRecorder) ReadByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByFilter", reflect.TypeOf((*MockClientRepo)(nil).ReadByFilter), arg0, arg1)
}

// Update mocks base method.
func (m *MockClientRepo) Update(arg0 context.Context, arg1 *entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientRepo)(nil).Update), arg0, arg1)
}

// MockMailingRepo is a mock of MailingRepo interface.
type MockMailingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMailingRepoMockRecorder
}

// MockMailingRepoMockRecorder is the mock recorder for MockMailingRepo.
type MockMailingRepoMockRecorder struct {
	mock *MockMailingRepo
}

// NewMockMailingRepo creates a new mock instance.
func NewMockMailingRepo(ctrl *gomock.Controller) *MockMailingRepo {
	mock := &MockMailingRepo{ctrl: ctrl}
	mock.recorder = &MockMailingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailingRepo) EXPECT() *MockMailingRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMailingRepo) Create(arg0 context.Context, arg1 *entity.Mailing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMailingRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMailingRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockMailingRepo) Delete(arg0 context.Context, arg1 *entity.Mailing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMailingRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMailingRepo)(nil).Delete), arg0, arg1)
}

// Read mocks base method.
func (m *MockMailingRepo) Read(arg0 context.Context, arg1 *entity.Mailing) (*entity.Mailing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*entity.Mailing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockMailingRepoMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMailingRepo)(nil).Read), arg0, arg1)
}

// ReadAll mocks base method.
func (m *MockMailingRepo) ReadAll(arg0 context.Context) (entity.Mailings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", arg0)
	ret0, _ := ret[0].(entity.Mailings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockMailingRepoMockRecorder) ReadAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockMailingRepo)(nil).ReadAll), arg0)
}

// ReadWithMessages mocks base method.
func (m *MockMailingRepo) ReadWithMessages(arg0 context.Context, arg1 *entity.Mailing) (*entity.MailingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithMessages", arg0, arg1)
	ret0, _ := ret[0].(*entity.MailingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithMessages indicates an expected call of ReadWithMessages.
func (mr *MockMailingRepoMockRecorder) ReadWithMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithMessages", reflect.TypeOf((*MockMailingRepo)(nil).ReadWithMessages), arg0, arg1)
}

// Update mocks base method.
func (m *MockMailingRepo) Update(arg0 context.Context, arg1 *entity.Mailing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMailingRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMailingRepo)(nil).Update), arg0, arg1)
}

// MockMessageRepo is a mock of MessageRepo interface.
type MockMessageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepoMockRecorder
}

// MockMessageRepoMockRecorder is the mock recorder for MockMessageRepo.
type MockMessageRepoMockRecorder struct {
	mock *MockMessageRepo
}

// NewMockMessageRepo creates a new mock instance.
func NewMockMessageRepo(ctrl *gomock.Controller) *MockMessageRepo {
	mock := &MockMessageRepo{ctrl: ctrl}
	mock.recorder = &MockMessageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepo) EXPECT() *MockMessageRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageRepo) Create(arg0 context.Context, arg1 *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageRepo)(nil).Create), arg0, arg1)
}

// Read mocks base method.
func (m *MockMessageRepo) Read(arg0 context.Context, arg1 *entity.Message) (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockMessageRepoMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockMessageRepo)(nil).Read), arg0, arg1)
}

// ReadByMailing mocks base method.
func (m *MockMessageRepo) ReadByMailing(arg0 context.Context, arg1 *entity.Mailing) (entity.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByMailing", arg0, arg1)
	ret0, _ := ret[0].(entity.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByMailing indicates an expected call of ReadByMailing.
func (mr *MockMessageRepoMockRecorder) ReadByMailing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByMailing", reflect.TypeOf((*MockMessageRepo)(nil).ReadByMailing), arg0, arg1)
}

// MockGeneralProducer is a mock of GeneralProducer interface.
type MockGeneralProducer struct {
	ctrl     *gomock.Controller
	recorder *MockGeneralProducerMockRecorder
}

// MockGeneralProducerMockRecorder is the mock recorder for MockGeneralProducer.
type MockGeneralProducerMockRecorder struct {
	mock *MockGeneralProducer
}

// NewMockGeneralProducer creates a new mock instance.
func NewMockGeneralProducer(ctrl *gomock.Controller) *MockGeneralProducer {
	mock := &MockGeneralProducer{ctrl: ctrl}
	mock.recorder = &MockGeneralProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeneralProducer) EXPECT() *MockGeneralProducerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockGeneralProducer) Publish(arg0 context.Context, arg1 *entity.Mailing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockGeneralProducerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockGeneralProducer)(nil).Publish), arg0, arg1)
}

// MockAdditionalProducer is a mock of AdditionalProducer interface.
type MockAdditionalProducer struct {
	ctrl     *gomock.Controller
	recorder *MockAdditionalProducerMockRecorder
}

// MockAdditionalProducerMockRecorder is the mock recorder for MockAdditionalProducer.
type MockAdditionalProducerMockRecorder struct {
	mock *MockAdditionalProducer
}

// NewMockAdditionalProducer creates a new mock instance.
func NewMockAdditionalProducer(ctrl *gomock.Controller) *MockAdditionalProducer {
	mock := &MockAdditionalProducer{ctrl: ctrl}
	mock.recorder = &MockAdditionalProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdditionalProducer) EXPECT() *MockAdditionalProducerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockAdditionalProducer) Publish(arg0 context.Context, arg1 *entity.MailingWithClients) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockAdditionalProducerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAdditionalProducer)(nil).Publish), arg0, arg1)
}

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSender) Send(arg0 context.Context, arg1 *entity.SendRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSenderMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSender)(nil).Send), arg0, arg1)
}
